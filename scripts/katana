#!/usr/bin/python

import argparse
import re

IP_RE = "(^[2][0-5][0-5]|^[1]{0,1}[0-9]{1,2})\.([0-2][0-5][0-5]|[1]{0,1}[0-9]{1,2})\
\.([0-2][0-5][0-5]|[1]{0,1}[0-9]{1,2})\.([0-2][0-5][0-5]|[1]{0,1}[0-9]{1,2})$"


def type_ip_port(string):
    msg = None
    ip, port = string.split(':')
    if not re.match(IP_RE, ip):
        msg = '%s is not a valid ip address' % ip
    try:
        port = int(port)
    except ValueError:
        msg = '%s is not a valid port number' % port
    if port < 0 or port > 65535:
        msg = '%s is not a valid port number' % port
    if msg:
        raise argparse.ArgumentTypeError(msg)
    return ip, int(port)

def main():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--clean', help='start the cleaner process', action='store_true')
    group.add_argument('--init', help='init the cleaner process', action='store_true')
    group.add_argument('--dump', help='print the configuration', action='store_true')
    group.add_argument('--start', help='start the server', default='0.0.0.0:8080',
                       metavar='IP:PORT', type=type_ip_port)
    args = parser.parse_args()

    if args.dump:
        from katana.server import Server
        from pprint import pprint
        pprint(Server().config)

    elif args.clean:
        from katana.cleaner import Cleaner
        Cleaner().start()

    elif args.init:
        from katana.cleaner import Cleaner
        Cleaner().init()

    elif args.start:
        ip, port = args.start
        from gevent.pywsgi import WSGIServer
        from katana.server import Server
        print('listening on %s:%s' % (ip, port))
        WSGIServer((ip, port), Server().app).serve_forever()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
